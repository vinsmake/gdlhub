import { isTokenExpired } from './tokenUtils.js';

export const fetchAuth = async (url, options = {}) => {
  console.log('üåê [FETCH_AUTH] Iniciando request autenticado a:', url);
  
  const token = localStorage.getItem("token");
  console.log('üîë [FETCH_AUTH] Token obtenido del localStorage:', token ? 'Token presente' : 'Token ausente');
  
  // Check if token is expired before making the request
  console.log('üîç [FETCH_AUTH] Verificando expiraci√≥n antes del request...');
  if (isTokenExpired(token)) {
    console.log('üö® [FETCH_AUTH] ¬°TOKEN EXPIRADO! Iniciando logout autom√°tico...');
    
    // Show user-friendly message
    alert("Tu sesi√≥n ha expirado. Por favor, inicia sesi√≥n nuevamente.");
    
    // Clear localStorage and dispatch logout event
    console.log('üßπ [FETCH_AUTH] Limpiando localStorage...');
    localStorage.removeItem("user");
    localStorage.removeItem("token");
    
    // Dispatch a custom event to notify UserContext about logout
    console.log('üì¢ [FETCH_AUTH] Enviando evento tokenExpired...');
    window.dispatchEvent(new CustomEvent("tokenExpired"));
    
    // Redirect to login page
    console.log('‚Ü©Ô∏è [FETCH_AUTH] Redirigiendo a /login...');
    window.location.href = "/login";
    
    // Return a rejected promise to prevent further execution
    return Promise.reject(new Error("Token expired"));
  }
  
  console.log('‚úÖ [FETCH_AUTH] Token v√°lido, procediendo con el request...');
  
  const response = await fetch(url, {
    ...options,
    headers: {
      ...(options.headers || {}),
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json"
    }
  });

  console.log('üì° [FETCH_AUTH] Respuesta recibida:', {
    status: response.status,
    statusText: response.statusText,
    url: url
  });

  // Check if token has expired (403 or 401 status from server)
  if (response.status === 403 || response.status === 401) {
    console.log('‚ö†Ô∏è [FETCH_AUTH] Respuesta de error de autenticaci√≥n detectada (403/401)');
    
    const responseData = await response.json().catch(() => ({}));
    console.log('üìÑ [FETCH_AUTH] Datos de respuesta:', responseData);
    
    // Check if it's specifically a token expiration error
    if (responseData.message?.includes("expirado") || responseData.message?.includes("inv√°lido")) {
      console.log('üö® [FETCH_AUTH] ¬°ERROR DE TOKEN CONFIRMADO POR SERVIDOR! Mensaje:', responseData.message);
      
      // Show user-friendly message
      alert("Tu sesi√≥n ha expirado. Por favor, inicia sesi√≥n nuevamente.");
      
      // Clear localStorage and dispatch logout event
      console.log('üßπ [FETCH_AUTH] Limpiando localStorage despu√©s de error del servidor...');
      localStorage.removeItem("user");
      localStorage.removeItem("token");
      
      // Dispatch a custom event to notify UserContext about logout
      console.log('üì¢ [FETCH_AUTH] Enviando evento tokenExpired despu√©s de error del servidor...');
      window.dispatchEvent(new CustomEvent("tokenExpired"));
      
      // Redirect to login page
      console.log('‚Ü©Ô∏è [FETCH_AUTH] Redirigiendo a /login despu√©s de error del servidor...');
      window.location.href = "/login";
    } else {
      console.log('‚ÑπÔ∏è [FETCH_AUTH] Error de autenticaci√≥n pero no relacionado con expiraci√≥n de token');
    }
  } else {
    console.log('‚úÖ [FETCH_AUTH] Request completado exitosamente');
  }

  return response;
};
